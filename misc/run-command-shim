#!/usr/bin/env bash

set -e -o pipefail
readonly SCRIPT_DIR=$(dirname "$0")
readonly LOG_DIR="/var/log/azure/run-command-handler"
readonly LOG_FILE=handler.log
readonly HANDLER_BIN="run-command-handler"

# in multiconfig case $ConfigExtensionName and $ConfigSequenceNumber should be set by the agent
readonly EXTENSION_NAME=$ConfigExtensionName
readonly SEQNO=$ConfigSequenceNumber
echo "ConfigExtensionName: $EXTENSION_NAME"
echo "ConfigSequenceNumber: $SEQNO"

# status_file returns the .status file path we are supposed to write
# by determining the highest sequence number from ./config/*.settings files.
status_file_path() {
        # multiconfig support: status file name should be "extname.seqNo.status"
        if [ -n "$EXTENSION_NAME" ] && [ -n "$ConfigSequenceNumber" ]; then
            status_file=$(echo $EXTENSION_NAME.$SEQNO.status)
        else
            # normally we would need to find this config_dir by parsing the
            # HandlerEnvironment.json, but we are in a bash script here,
            # so assume it's at ../config/.
            config_dir=$(readlink -f "${SCRIPT_DIR}/../config")
            status_dir=$(readlink -f "${SCRIPT_DIR}/../status")
            config_file=$(ls $config_dir | grep -E ^[0-9]+.settings$ | sort -n | tail -n 1)
            if [ -f "$config_file" ]; then
                echo "Cannot locate the config file.">&2
                exit 1
            fi
            status_file=$(echo $config_file | sed s/settings/status/)
        fi

        readlink -f "$status_dir/$status_file"
}

write_status() {
	status_file="$(status_file_path)"
	if [ -f "$status_file" ]; then
		echo "Not writing a placeholder status file, already exists: $status_file"
	else
		echo "Writing a placeholder status file indicating progress before forking: $status_file"
		timestamp="$(date --utc --iso-8601=seconds)"
		cat > "$status_file" <<- EOF
			[
				{
					"version": 1,
					"timestampUTC": "$timestamp",
					"status": {
						"operation": "Enable",
						"status": "transitioning",
						"formattedMessage": {
							"lang": "en",
							"message": "{}"
						}
					}
				}
			]
		EOF
	fi
}

check_binary_write_lock() {
    set +e # disable exit on non-zero return code
    local retry_attempts=0
    while (( retry_attempts < 10 )); do
        lsof_result="$(lsof -F ac ${bin})"
        lsof_return_code=$?
        if [ "$lsof_return_code" -eq 0 ]; then
            #"lsof -F" outputs results in more parse-able format, "-F ac" option prints access mode and command name for process
            #access mode and command names are prepended with a and c
            file_mode="$(echo "$lsof_result" | awk 'match($0, /^a(.*)$/) {print $0}')"
            process_name="$(echo "$lsof_result" | awk 'match($0, /^c(.*)$/) {print substr($0, RSTART+1, RLENGTH-1)}')"

            found_write_lock=0
            file_mode_array=($file_mode)
            i=0
            for name in $process_name
            do
                file_handle_mode=${file_mode_array[$i]}
                echo "$name has access mode '$file_handle_mode' file handle on ${HANDLER_BIN}"
                ## w and u are file descriptor modes for write and read/write access
                if [[ $file_handle_mode == "aw" ]] || [[ $file_handle_mode == "au" ]]; then
                    found_write_lock=1
                fi
                ((++i))
            done
            if [ "$found_write_lock" -eq 0 ]; then
                # did not find write lock on any file no need to wait or retry
                break
            fi
            ((++retry_attempts))
            echo "waiting for process(es) with write handle on ${HANDLER_BIN}"
            echo "sleeping for 3 seconds before retry, attempt ${retry_attempts} of 10"
            sleep 3
        else
            break
        fi
    done
    # do not return error if file descriptor is open after retries expire, make a best effort attempt to start custom-script-extension
    set -e
    return 0
}

if [ "$#" -ne 1 ]; then
    echo "Incorrect usage."
    echo "Usage: $0 <command>"
    exit 1
fi

# Redirect logs of the handler process
mkdir -p "$LOG_DIR"
exec &> >(tee -ia "$LOG_DIR/$LOG_FILE")

# Start handling the process in the background
bin="$(readlink -f "$SCRIPT_DIR/$HANDLER_BIN")"
cmd="$1"

if [[ "$cmd" == "enable" ]]; then
    # for 'enable' command, write a .status file first, then double fork
    # to detach from the handler process tree to avoid getting terminated 
    # after the 15-minute extension enabling timeout.
    write_status
    check_binary_write_lock
    set -x
    # & will execute the binary on the backgraound and will not block current shell execution
    nohup "$bin" "$cmd" &
else
    # execute the handler process as a child process
    check_binary_write_lock
    set -x
    "$bin" "$cmd"
fi
